---
import { Image } from 'astro:assets'
import netherrack from '../assets/netherrack.png'
import grassBlock from '../assets/grassblock.png'
import '../styles/monocraft.css'
---

<div id="coordinates">
    <div id="overworld"> 
        <div class="header">
            <Image src={grassBlock} alt="Grass Block" />
            <h1>Overworld</h1>
        </div>
        <div class="coords">
            <div class="coord">
                X: <span class="x" contenteditable="false"></span>
            </div>
            <div class="coord">
                Z: <span class="z" contenteditable="false"></span>
            </div>
        </div>
    </div>
    <div id="nether">
        <div class="header">
            <Image src={netherrack} alt="Netherrack" />
            <h1>Nether</h1>
        </div>
        <div class="coords">
            <div class="coord">
                X: <span class="x" contenteditable="false"></span>
            </div>
            <div class="coord">
                Z: <span class="z" contenteditable="false"></span>
            </div>
        </div>
    </div>
</div>

<script>
import { effect } from 'nanostores';
import { convertedCoords, coords, Dimension, dimension, type Coords } from '../portal.ts';

const netherContainer = document.getElementById('nether') as HTMLDivElement;
const overworldContainer = document.getElementById('overworld') as HTMLDivElement;

function setupFocus(container: HTMLDivElement) {
    const { xElem, zElem } = getCoordElements(container);
    xElem.parentElement?.addEventListener('click', () => {
        console.log('X coordinate clicked');
        xElem.focus();
    });
    zElem.parentElement?.addEventListener('click', () => {
        console.log('Z coordinate clicked');
        zElem.focus();
    });
}
setupFocus(netherContainer);
setupFocus(overworldContainer);

function getCoordElements(container: HTMLDivElement) {
    const xElem = container.querySelector('.x') as HTMLSpanElement;
    const zElem = container.querySelector('.z') as HTMLSpanElement;
    return { xElem, zElem };
}

const setCoords = (container: HTMLDivElement, coords: Coords | undefined) => {
    const { xElem: xCoord, zElem: zCoord } = getCoordElements(container)
    xCoord.textContent = `${coords?.x ?? '-'}`;
    zCoord.textContent = `${coords?.z ?? '-'}`;
};

effect([convertedCoords, coords, dimension], (convertedCoords, coords, dimension) => {
    switch (dimension) {
        case Dimension.Overworld:
            setCoords(overworldContainer, coords);
            setCoords(netherContainer, convertedCoords);
            break;
        case Dimension.Nether:
            setCoords(netherContainer, coords);
            setCoords(overworldContainer, convertedCoords);
            break;
        default:
            setCoords(overworldContainer, undefined);
            setCoords(netherContainer, undefined);
    }
    return () => {
        setCoords(overworldContainer, undefined);
        setCoords(netherContainer, undefined);
    };
});
</script>

<style>
    .header {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .header img {
        height: 2em;
        width: auto;
    }

    .header h1 {
        font-size: 24px;
    }

    .coords {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .coord {
        font-family: 'Monocraft', 'Courier New', Courier, monospace;
        color: rgb(238, 238, 238);
        background: rgb(0, 0, 0);
        padding: 4px 8px;
        border: 2px solid rgb(160, 160, 160);
        cursor: text;
    }

    input[type="text"] {
        font-family: 'Monocraft', 'Courier New', Courier, monospace;
        font-size: 1em;
        width: auto;
    }
</style>